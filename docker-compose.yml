networks:
  kafka-network:
    driver: bridge

services:
  shop-controller:
    build:
      context: ./ShopController/
      dockerfile: Dockerfile
    ports:
      - "8080:8080"
    depends_on:
      - database-controller
      - kafka-message-broker
    restart: always
    networks:
      - kafka-network
    hostname:
      shop-controller

  database-controller:
    build:
      context: ./DatabaseController
      dockerfile: Dockerfile
    ports:
      - "8081:8080"
    depends_on:
      - kafka-message-broker
      - database
    restart: always
    networks:
      - kafka-network
    hostname:
      database-controller

  kafka-message-broker:
    image: confluentinc/cp-kafka:latest
    container_name: kafka
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ADVERTISED_LISTENERS: INSIDE://kafka-message-broker:9093,OUTSIDE://kafka-message-broker:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INSIDE:PLAINTEXT,OUTSIDE:PLAINTEXT
      KAFKA_LISTENERS: INSIDE://kafka-message-broker:9093,OUTSIDE://kafka-message-broker:9092
      KAFKA_INTER_BROKER_LISTENER_NAME: INSIDE
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_CREATE_TOPICS:
        "
        departments:1:1,
        addDepartment:1:1,
        deleteDepartment:1:1,
        updateDepartment:1:1,
        products:1:1,
        addProduct:1:1,
        deleteProduct:1:1,
        updateProduct:1:1,
        orders:1:1,
        addOrder:1:1,
        deleteOrder:1:1,
        updateOrder:1:1,
        line-items:1:1,
        addLineItem:1:1,
        deleteLineItem:1:1,
        updateLineItem:1:1,
        batch-complete:1:1,
        test-quantity:1:1,
        batch-size:1:1
        "
      AUTO_CREATE_TOPICS_ENABLE: "true"
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    depends_on:
      - zookeeper
    restart: always
    networks:
      - kafka-network
    hostname:
      kafka-message-broker

  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"
    restart: always
    networks:
      - kafka-network
    hostname:
      zookeeper

  database:
    image: postgres:latest
    container_name: postgres
    ports:
      - "5432:5432"
    environment:
      POSTGRES_DB: shop_db
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: password
    volumes:
      - pgdata:/var/lib/postgresql/data
    restart: always
    networks:
      - kafka-network
    hostname:
      database

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    networks:
      - kafka-network
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    networks:
      - kafka-network
    ports:
      - "9090:9090"
    volumes:
      - prometheus_data:/etc/prometheus
      - ./prometheus.yml:/etc/prometheus/prometheus.yml

volumes:
  pgdata:
    driver: local
  grafana_data:
      driver: local
  prometheus_data:
      driver: local
